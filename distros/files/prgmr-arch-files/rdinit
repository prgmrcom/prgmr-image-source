#!/usr/bin/ash
# Based initially on the startup script included with Arch Linux's initrd,
# and customized so that it runs an install process.

udevd_running=0
mount_handler=default_mount_handler
init=/archinstall-scripts/archinstall_archboot
rd_logmask=0

install -Dm755 /prgmr-arch-files/udhcpc.script /usr/share/udhcpc/default.script
sed -r -e 's/[^ "]*archiso[^ "]*//g' /config |sed -r -e 's/ +"/"/' |sed -r -e 's/ +/ /g' > /config2
mv /config2 /config
. /init_functions

mount_setup
# parse the kernel command line
parse_cmdline </proc/cmdline

# setup logging as early as possible
rdlogger_start

for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done

. /config

run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

run_hookfunctions 'run_hook' 'hook' $HOOKS

# honor the old behavior of break=y as a synonym for break=premount
if [ "${break}" = "y" ] || [ "${break}" = "premount" ]; then
    echo ":: Pre-mount break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

ifconfig eth0 up
udhcpc eth0

# Make install root, mount the root filesystem, and extract the bootstrap archive.
mkdir /mnt
mkdir /airootfs
mount -t iso9660 /dev/cdrom /mnt
mount -t squashfs -o loop /mnt/arch/x86_64/airootfs.sfs /airootfs
mkdir -p /run/workdir
mkdir -p /run/lowerdir
mkdir -p /run/upperdir

# Copy scripts into place
cp -a /prgmr-arch-files/archinstall-scripts /run/lowerdir

mount -t overlay -o lowerdir=/run/lowerdir:/airootfs,upperdir=/run/upperdir,workdir=/run/workdir overlay /new_root
# switch_root into arch environment
install -Dm644 /etc/resolv.conf /new_root/etc/resolv.conf
rdlogger_stop
exec env -i switch_root /new_root "${init}" "$@"
